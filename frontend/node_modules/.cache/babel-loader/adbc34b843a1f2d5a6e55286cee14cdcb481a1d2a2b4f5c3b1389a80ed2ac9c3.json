{"ast":null,"code":"var _jsxFileName = \"/app/src/components/CompaniesContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport CompanyList from './CompanyList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CompaniesContainer() {\n  _s();\n  const [companies, setCompanies] = useState([]);\n  useEffect(() => {\n    const fetchCompanies = async () => {\n      try {\n        const response = await fetch('http://localhost/api/companies');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setCompanies(data);\n      } catch (error) {\n        console.error('Error fetching companies:', error);\n      }\n    };\n    fetchCompanies();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CompanyList, {\n    companies: companies,\n    setCompanies: setCompanies\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n}\n_s(CompaniesContainer, \"fvSMykEKVRSxSgZ7G/ZC4cRqlrw=\");\n_c = CompaniesContainer;\nexport default CompaniesContainer;\nvar _c;\n$RefreshReg$(_c, \"CompaniesContainer\");","map":{"version":3,"names":["React","useState","useEffect","CompanyList","jsxDEV","_jsxDEV","CompaniesContainer","_s","companies","setCompanies","fetchCompanies","response","fetch","ok","Error","data","json","error","console","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/app/src/components/CompaniesContainer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport CompanyList from './CompanyList';\n\nfunction CompaniesContainer() {\n    const [companies, setCompanies] = useState([]);\n\n    useEffect(() => {\n        const fetchCompanies = async () => {\n            try {\n                const response = await fetch('http://localhost/api/companies');\n                if (!response.ok) {\n                    throw new Error('Network response was not ok');\n                }\n                const data = await response.json();\n                setCompanies(data);\n            } catch (error) {\n                console.error('Error fetching companies:', error);\n            }\n        };\n\n        fetchCompanies();\n    }, []);\n\n    return (\n        <CompanyList companies={companies} setCompanies={setCompanies} />\n    );\n}\n\nexport default CompaniesContainer;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,kBAAkBA,CAAA,EAAG;EAAAC,EAAA;EAC1B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACZ,MAAMQ,cAAc,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,CAAC;QAC9D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAClD;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCP,YAAY,CAACM,IAAI,CAAC;MACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACrD;IACJ,CAAC;IAEDP,cAAc,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIL,OAAA,CAACF,WAAW;IAACK,SAAS,EAAEA,SAAU;IAACC,YAAY,EAAEA;EAAa;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAEzE;AAACf,EAAA,CAvBQD,kBAAkB;AAAAiB,EAAA,GAAlBjB,kBAAkB;AAyB3B,eAAeA,kBAAkB;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}